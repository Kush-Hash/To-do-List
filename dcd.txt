* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

body {
    background-color: #1B1B3A;
}

#main-heading {
    font-family: "Kablammo", system-ui;
    font-optical-sizing: auto;
    font-weight: 100;
    font-style: normal;

    color: white;
    font-size: 5rem;
    text-align: center;

    margin-top: 0.5rem;
}

form {
    margin-top: 3rem;
    display: flex;
    min-height: 20vh;
    justify-content: center;
    align-items: center;
    /* border: 1px solid white; */
    gap: 10px;
}

form input {
    height: 2.5rem;
    width: 15rem;
    border-radius: 0.7rem;
    padding-left: 0.7rem;
    padding-right: 0.7rem;
    background: white;
    color: #e22f56;
    font-size: 1rem;
    border: none;
    outline: none;
    font-family: "Walter Turncoat", cursive;
    font-weight: 600;
    font-style: normal;
}

form input::placeholder {
    font-family: "Walter Turncoat", cursive;
    font-weight: 600;
    font-style: normal;
    color: #e22f56;
    opacity: 0.5;
}

.bt1 {
    height: 2rem;
    width: 2rem;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    border: none;
    font-size: 1.5rem;
    color: #e22f56;
    background: white;
    transition: all 0.3 ease;
}

.bt1:hover {
    color: white;
    background: #e22f56;
    cursor: pointer;

}

.todo-list {
    display: flex;
    flex-direction: column;
    align-items: center;
    /* border: 1px solid white; */
}

.todo-list {
    min-width: 30%;
    list-style: none;
}

.todo {
    margin: 0.5rem;
    padding-left: 0.5rem;
    background: white;
    color: black;
    font-family: "Walter Turncoat", cursive;
    font-weight: 400;
    font-style: normal;
    font-size: 1.3rem;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: 0.5s;
    border-radius: 1.5rem;
    height: 3rem;
    /* box-sizing: border-box; */
}

.todo li {
    flex: 1;
}

.trash-btn,
.complete-btn {
    color: white;
    border: none;
    padding: 1rem;
    cursor: pointer;
    font-size: 1.3rem;
    height: 3rem;
    display: flex;
    align-items: center;
}

.complete-btn {
    background: #e22f56;
}

.trash-btn {
    border-top-right-radius: 1.75rem;
    border-bottom-right-radius: 1.75rem;
    background: pink;
}

.todo-item {
    padding: 0rem 0.5rem;
}

.fa-trash,
.fa-check-circle {
    pointer-events: none;
}

.todo.completed {
    opacity: 0.5;
}

.todo-item.completed {
    text-decoration: line-through;
}

.slide {
    transform: translateX(10rem);
    transition: all 0.5s ease;
    opacity: 0;
}

#dropdown {
    width: 7.5rem;
    padding: 0.6rem;
    font-family: "Walter Turncoat", cursive;
    font-size: 0.9rem;
    font-weight: 600;
    border: none;
    border-radius: 1.5rem;
    background-color: white;
    /* color: #e22f56; */
    color: #1B1B3A;
    cursor: pointer;
    outline: none;
    border: none;
    margin: 1rem;
    overflow: hidden;
}

#dropdown option {
    background: #e22f56;
    color: white;
}

#dropdown option:hover {
    cursor: pointer;
    background: #e22f56;
    color: white;
}

/* select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;

} */


#dropdown::after {
    content: "\25BC";
    /* position: absolute; */
    /* background: pink; */
    /* top: 0; */
    /* right: 0; */
    /* padding: 1rem; */
    pointer-events: none;
    transition: all 0.3s ease;

}

#dropdown::hover:after {
    background: white;
    color: pink;
}


const todoInput = document.querySelector(".todo-Input");
const todoBtn = document.querySelector(".bt1");
const todoList = document.querySelector(".todo-list");
const filterOption = document.querySelector("#dropdown");

document.addEventListener("DOMContentLoaded", getLocalTodos);
//When the page loads, this event listener calls getLocalTodos to load any saved to-do items from local storage.
todoBtn.addEventListener("click", addTodo);
todoList.addEventListener("click", deleteCheck);
filterOption.addEventListener("change", filterTodo);

//addTodo creates a new to -do item.
function addTodo(event) {
    event.preventDefault();
    //event.preventDefault() prevents the page from refreshing when the button is clicked.
    const todoDiv = document.createElement("div");
    todoDiv.classList.add("todo");
    const newTodo = document.createElement("li");
    newTodo.innerText = todoInput.value;
    newTodo.classList.add("todo-item");
    todoDiv.appendChild(newTodo);

    saveLocalTodos(todoInput.value);
    //The saveLocalTodos function is called to save this new to-do item to the local storage.

    const completeBtn = document.createElement("button");
    completeBtn.innerHTML = '<i class="fas fa-check-circle"></i>';
    completeBtn.classList.add("complete-btn");
    todoDiv.appendChild(completeBtn);

    const trashBtn = document.createElement("button");
    trashBtn.innerHTML = '<i class="fas fa-trash"></i>';
    trashBtn.classList.add("trash-btn");
    todoDiv.appendChild(trashBtn);

    todoList.appendChild(todoDiv);
    todoInput.value = "";
    // The entire div containing the new to-do is added to the main list, and the input box is cleared for the next entry.
}

function deleteCheck(e) {
    const item = e.target;

    // If trash button is clicked
    if (item.classList.contains("trash-btn")) {
        const todo = item.parentElement;

        // Add slide-out animation and remove item after the transition
        todo.classList.add("slide");

        // Remove from local storage
        removeLocalTodos(todo);

        // After transition ends, remove item from DOM
        todo.addEventListener("transitionend", function () {
            todo.remove();
        });
    }

    // If complete button is clicked
    else if (item.classList.contains("complete-btn")) {
        const todo = item.parentElement;

        // Toggle completed class for both the item and text
        todo.classList.toggle("completed");
        todo.querySelector(".todo-item").classList.toggle("completed");
    }
}

function filterTodo(e) {
    const todos = Array.from(todoList.children).filter(todo => todo.nodeType === 1); // Filters out only element nodes
    todos.forEach(function (todo) {
        switch (e.target.value) {
            case "all":
                todo.style.display = "flex";
                break;
            case "completed":
                if (todo.classList.contains("completed")) {
                    todo.style.display = "flex";
                } else {
                    todo.style.display = "none";
                }
                break;
            case "incomplete":
                if (!todo.classList.contains("completed")) {
                    todo.style.display = "flex";
                } else {
                    todo.style.display = "none";
                }
                break;
        }
    });
}


function saveLocalTodos(todo) {
    let todos;
    if (localStorage.getItem("todos") === null) {
        todos = [];
    } else {
        todos = JSON.parse(localStorage.getItem("todos"));
    }
    todos.push(todo);
    localStorage.setItem("todos", JSON.stringify(todos));
}

function getLocalTodos() {
    let todos;
    if (localStorage.getItem("todos") === null) {
        todos = [];
    } else {
        todos = JSON.parse(localStorage.getItem("todos"));
    }
    todos.forEach(function (todo) {
        const todoDiv = document.createElement("div");
        todoDiv.classList.add("todo");
        const newTodo = document.createElement("li");
        newTodo.innerText = todo;
        newTodo.classList.add("todo-item");
        todoDiv.appendChild(newTodo);

        const completeBtn = document.createElement("button");
        completeBtn.innerHTML = '<i class="fas fa-check-circle"></i>';
        completeBtn.classList.add("complete-btn");
        todoDiv.appendChild(completeBtn);

        const trashBtn = document.createElement("button");
        trashBtn.innerHTML = '<i class="fas fa-trash"></i>';
        trashBtn.classList.add("trash-btn");
        todoDiv.appendChild(trashBtn);

        todoList.appendChild(todoDiv);
    });
}

function removeLocalTodos(todo) {
    let todos;
    if (localStorage.getItem("todos") === null) {
        todos = [];
    } else {
        todos = JSON.parse(localStorage.getItem("todos"));
    }

    const todoIndex = todo.children[0].innerText;
    todos.splice(todos.indexOf(todoIndex), 1);
    localStorage.setItem("todos", JSON.stringify(todos));
}
